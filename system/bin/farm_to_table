#!/bin/bash

# farm_to_table
# Matt Allbright
# This script will automatically pull data from Hermes for studies and then sort
# individual files into the proper study directory. It is based on ideas from
# previous "convertit"-type scripts used in the lab.

#Functions

# Function necessary to figure out the intracacies of each study
# Why they were set up in completely different ways, and in completely different
# structures, is beyond me
getInfo() {
  if [ $study = "tbimodel" ] || [ $study = "TBIMODEL" ]; then
    longitudinalBool=0
    # Forcing new prefix to TBIMODEL_000 standard
    studyPrefix="TM"
    boldValues=("resting")
    magPhaseBool=1
  elif [ $study = "BLHC" ]; then
    longitudinalBool=0
    studyPrefix="BLHC"
    boldValues=("resting" "MSIT" "NBACK")
    magPhaseBool=0
    echo "$study is not set up properly with this system."
    echo "Contact a system administrator."
    exit 1
  elif [ $study = "BL2" ]; then
    longitudinalBool=1
    studyPrefix="BL2_mTBI_"
    boldValues=("resting" "MSIT" "NBACK")
    magPhaseBool=0
  elif [ $study = "blt" ]; then
    longitudinalBool=1
    studyPrefix="BL"
    boldValues=("resting" "MSIT" "NBACK")
    magPhaseBool=0
    echo "$study is not set up properly with this system."
    echo "Contact a system administrator."
    exit 1
  elif [ $study = "BLPTSD" ]; then
    longitudinalBool=1
    studyPrefix="BLPTSD_"
    boldValues=("resting" "anticipation" "BMAT_fear" "BMAT_happy" "dot_probe" "fear_conditioning")
    magPhaseBool=0
  elif [ $study = "EWM" ]; then
    longitudinalBool=0
    studyPrefix="EWM_"
    boldValues=("resting" "Faces" "IAPS")
    magPhaseBool=0
  elif [ $study = "EIT" ]; then
    longitudinalBool=0
    studyPrefix="EIT_"
    boldValues=()
    magPhaseBool=0
  elif [ $study = "emot" ]; then
    longitudinalBool=0
    studyPrefix="emot"
    boldValues=("anger" "EmotDist" "faceint" "fear" "food" "happy" "memsupp" "sceneint" "trust" "resting")
    magPhaseBool=0
    echo "$study is not set up properly with this system."
    echo "Contact a system administrator."
    exit 1
  elif [ $study = "ICBT" ]; then
    longitudinalBool=1
    studyPrefix="ICBT"
    boldValues=("EIT")
    magPhaseBool=0
    echo "$study is not set up properly with this system."
    echo "Contact a system administrator."
    exit 1
  else
    echo "Study not found: $study"
    exit 1
  fi
}

# Just grabs data from Hermes
HermesFetch(){
  # Bunch of error checking before forcing a fetch
  if [ ! -d /Hermes ]; then
    echo "Hermes directory doesn't exist!"
    exit 1
  elif [ -z "$(ls -A /Hermes)" ]; then
    echo "Hermes isn't mounted properly!"
    exit 1
  fi
  if [ ! -d $studyDir ]; then
    echo "$study directory doesn't exist!"
    exit 1
  elif [ -z "$(ls -A $studyDir)" ]; then
    echo "$study isn't mounted properly!"
    exit 1
  fi

  if [ ! -d $particRawDir ]; then
    # Fetch data from RAW for $partic
    echo "Locating data for $partic..."
    # Strip partic to just the numbers
    particNumber=`echo $partic | grep -Eo '[0-9][0-9][0-9]'`
    # Find folder where number pattern is present
    if [ ! -z `find /Hermes/"$study"_scans -maxdepth 1 -iname "*$particNumber*" -print | sort | tail -1` ]; then
      mkdir -p $particRawDir
      osirixDir=`find /Hermes/"$study"_scans -maxdepth 1 -iname "*$particNumber*" -print | sort | tail -1` #| sed 's/.*\///'
      echo "Copying data from shared mount..."
      cp -rv "$osirixDir/." $particRawDir/
      dataNotFound=0
    else
      echo "No data found for $partic. Make sure Osirix data is anonymized and organized."
      dataNotFound=1
    fi
  else
    echo "The RAW directory already exists for this user. Would you like to copy"
    echo "anyway? Typically RAW_data can be overwritten without consequence."
    read rawResponse
    if [[ "$rawResponse" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      # Fetch data from RAW for $partic
      echo "Locating data for $partic..."
      # Strip partic to just the numbers
      particNumber=`echo $partic | grep -Eo '[0-9][0-9][0-9]'`
      # Find folder where number pattern is present
      if [ ! -z `find /Hermes/"$study"_scans -maxdepth 1 -iname "*$particNumber*" -print | sort | tail -1` ]; then
        osirixDir=`find /Hermes/"$study"_scans -maxdepth 1 -iname "*$particNumber*" -print | sort | tail -1` #| sed 's/.*\///'
        echo "Copying data from shared mount..."
        cp -rv "$osirixDir/." $particRawDir/
      else
        echo "No data found for $partic. Make sure Osirix data is anonymized and organized."
        dataNotFound=0
      fi
    else
      echo "Data will not be modified. Continuing with structure..."
      dataNotFound=1
    fi
  fi
}

# Start program

echo "Welcome to Farm to Table."
echo "Farm to Table takes images and data from the machine Hermes and sorts"
echo "these files into a structured system for use with FSL, FreeSurfer, and"
echo "other real cool software."

echo "First, we need a study."
# New menu variables
studySelectArr=(/data/* "New study")

# Create menu
select studyDir in "${studySelectArr[@]}"; do
  case $studyDir in
    "New study")
      echo "Creating new study..."
      echo "This system is not implemented yet."
      newStudyBool=1
      break
      ;;
    *)
      echo "Selected $studyDir"
      newStudyBool=0
      break
      ;;
  esac
done

if [ $newStudyBool -eq 1 ]; then
  echo "What is the name of the study you would like to create? (e.g. EIT, tbimodel)"
  echo "Please refrain from using spaces or non-letter characters."
  read study
  studyDir="/data/$study"
  if [ -d /data/$study ]; then
    echo "Study already exists!"
    exit 1
  else
    echo "New study system not implemented"
    exit 1
  fi
fi

study=${studyDir#*/data/}
getInfo $study

# Init array
particArr=()

echo "What are the number(s) of the participants you would like to process?"
echo "Separate each with a space (e.g. 005 006 016 185)."
read particNums # Pull the numbers as delimited variables
particNumArr=($particNums) # Shove said numbers into an array
for partic in ${particNumArr[*]}; do
  particArr+=("$studyPrefix$partic") # Clean up the numbers array by adding a prefix (eg 102 becomes TM_102)
done

IFS=$'\n'

# Get data from Hermes for the participant(s)
for partic in ${particArr[*]}; do
  echo "Starting download for $partic"
  particRawDir="$studyDir/RAW_data/$partic"
  HermesFetch $partic

  if [ $dataNotFound -eq 1 ]; then
    echo "-----------------------------------------------"
    echo "No Osirix data found for $partic. Moving on..."
    echo "-----------------------------------------------"
  else
    # Create directory structure
    particDir=$studyDir/indiv_analysis/$partic
    if [ ! -d $particDir ]; then
      echo "Creating directory for $partic"
      dirAlreadyExists=0
      mkdir -p $particDir
    else
      echo "Directory detected."
      dirAlreadyExists=1
    fi

    # Longitudinal structuring
    if [ $longitudinalBool -eq 1 ]; then
      echo "Logitudinal study detected."
      # Check baseline directory existence
      if [ ! -z `find $particRawDir -maxdepth 1 -iname "*_BV" -print | sort | tail -1` ]; then
        echo "Baseline detected."
        baselineRawDir=`find $particRawDir -maxdepth 1 -iname "*_BV" -print | sort | tail -1`
        if [ $dirAlreadyExists -eq 1 ]; then
          echo "The indiv_analysis directory already exists."
          echo "Would you like to copy and possibly overwrite your Baseline indiv_analysis images?"
          read overwriteBaseline
          if [[ "$overwriteBaseline" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            baselineBool=1
          else
            baselineBool=0
          fi
        fi
      else
        baselineBool=0
      fi
      # Check post-treament directory existence
      if [ ! -z `find $particRawDir -maxdepth 1 -iname "*_PTX" -print | sort | tail -1` ]; then
        echo "PostTX detected."
        postTXRawDir=`find $particRawDir -maxdepth 1 -iname "*_PTX" -print | sort | tail -1`
        if [ $dirAlreadyExists -eq 1 ]; then
          echo "The indiv_analysis directory already exists."
          echo "Would you like to copy and possibly overwrite your PostTX indiv_analysis images?"
          read overwritePostTX
          if [[ "$overwritePostTX" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            postTXBool=1
          else
            postTXBool=0
          fi
        fi
      else
        postTXBool=0
      fi

      # Baseline Anatomical
      if [ $baselineBool -eq 1 ]; then
        anatDirArr=($(find $baselineRawDir -maxdepth 1 -iname "T1_MPRAGE_1MM*" -print | sort))
        anatNum=1
        if [ ! -d $particDir/anatomicals/Baseline ]; then
          mkdir -p $particDir/anatomicals/Baseline
        fi
        for anatomical in ${anatDirArr[@]}; do
          echo "Running dcm2nii for Anatomical $anatNum located in $anatomical"
          dcm2niix -f "$partic"_anatomical_$anatNum -o $particDir/anatomicals/Baseline "${anatomical}"
          anatNum=$((anatNum+1))
        done
      fi

      # PostTX Anatomical
      if [ $postTXBool -eq 1 ]; then
        anatDirArr=($(find $postTXRawDir -maxdepth 1 -iname "T1_MPRAGE_1MM*" -print | sort))
        anatNum=1
        if [ ! -d $particDir/anatomicals/PostTX ]; then
          mkdir -p $particDir/anatomicals/PostTX
        fi
        for anatomical in ${anatDirArr[@]}; do
          echo "Running dcm2nii for Anatomical $anatNum located in $anatomical"
          dcm2niix -f "$partic"_anatomical_$anatNum -o $particDir/anatomicals/PostTX "${anatomical}"
          anatNum=$((anatNum+1))
        done
      fi

      # Checks if bold array is empty
      if [ ${#boldValues[@]} -eq 0 ]; then
        echo "No BOLD tasks for $partic"
      else
        echo "Running BOLD for $partic"
        # Run bold sorting
        for bold_type in ${boldValues[*]}; do
          # Checks postTX bool
          if [ $baselineBool -eq 1 ]; then
            # Makes directory if it doesn't exist
            if [ ! -d $particDir/bold/${bold_type}/Baseline ]; then
              mkdir -p $particDir/bold/${bold_type}/Baseline
            fi
            # If task directory exists run dcm2niix on it
            if [ ! -z `find $baselineRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1` ]; then
              # Takes latest directory with bold
              boldDir=`find $baselineRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1`
              dcm2niix -f "$partic"_${bold_type}_BV -o $particDir/bold/${bold_type}/Baseline "$boldDir"
            else
              echo "No data for $bold_type in baseline $partic directory."
            fi
          fi
          # Checks postTX bool
          if [ $postTXBool -eq 1 ]; then
            # Makes directory if it doesn't exist
            if [ ! -d $particDir/bold/${bold_type}/PostTX ]; then
              mkdir -p $particDir/bold/${bold_type}/PostTX
            fi
            # If task directory exists run dcm2niix on it
            if [ ! -z `find $baselineRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1` ]; then
              boldDir=`find $baselineRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1`
              dcm2niix -f "$partic"_${bold_type}_PTX -o $particDir/bold/${bold_type}/PostTX "$boldDir"
            else
              echo "No data for $bold_type in post-treatment $partic directory."
            fi
          fi
        done
      fi

      # Baseline fieldmaps
      if [ $magPhaseBool -eq 1 ]; then
        # Running for Mag (note the sort -r)
        echo "Beginning Magnitude-Phase fieldmap conversion..."
        # Baseline
        if [ $baselineBool -eq 1 ]; then
          magDir=`find $baselineRawDir -maxdepth 1 -iname "*field*" -print | sort -r | tail -1`
          if [ ! -d $particDir/fieldmaps/Baseline ]; then
            mkdir -p $particDir/fieldmaps/Baseline
          fi
          echo "Running dcm2nii for Mag fieldmaps"
          dcm2niix -f "$partic"_Mag -o $particDir/fieldmaps/Baseline "$magDir"
        fi
        # PostTX
        if [ $postTXBool -eq 1 ]; then
          magDir=`find $postTXRawDir -maxdepth 1 -iname "*field*" -print | sort -r | tail -1`
          if [ ! -d $particDir/fieldmaps/PostTX ]; then
            mkdir -p $particDir/fieldmaps/PostTX
          fi
          echo "Running dcm2nii for Mag fieldmaps"
          dcm2niix -f "$partic"_Mag -o $particDir/fieldmaps/PostTX "$magDir"
        fi

        # Running same system for Phase
        # Baseline
        if [ $baselineBool -eq 1 ]; then
          phaseDir=`find $baselineRawDir -maxdepth 1 -iname "*field*" -print | sort | tail -1`
          echo "Running dcm2nii for Mag fieldmaps"
          dcm2niix -f "$partic"_Phase -o $particDir/fieldmaps/Baseline "$phaseDir"
        fi
        # PostTX
        if [ $postTXBool -eq 1 ]; then
          phaseDir=`find $postTXRawDir -maxdepth 1 -iname "*field*" -print | sort | tail -1`
          echo "Running dcm2nii for Mag fieldmaps"
          dcm2niix -f "$partic"_Phase -o $particDir/fieldmaps/PostTX "$phaseDir"
        fi
      else
        echo "No Magnitude of Phase fieldmaps found for $partic"
      fi

      echo "Finished transfer and conversion for $partic"
    # Non-logitudinal structuring
    else
      echo "Non-logitudinal study detected."
      if [ $dirAlreadyExists -eq 1 ]; then
        echo "The indiv_analysis directory already exists."
        echo "Would you like to copy and possibly overwrite your indiv_analysis images?"
        read overwritePartic
        if [[ "$overwritePartic" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
          echo "Continuing with copy..."
        else
          particBool=0
        fi
      fi
      anatDirArr=($(find $particRawDir -maxdepth 1 -iname "T1_MPRAGE_1MM*" -print | sort))
      anatNum=1
      if [ ! -d $particDir/anatomicals ]; then
        mkdir -p $particDir/anatomicals
      fi
      for anatomical in ${anatDirArr[@]}; do
        echo "Running dcm2nii for Anatomical $anatNum located in $anatomical"
        dcm2niix -f "$partic"_anatomical_$anatNum -o $particDir/anatomicals "${anatomical}"
        anatNum=$((anatNum+1))
      done

      if [ ${#boldValues[@]} -eq 0 ]; then
        echo "No BOLD values for $partic"
      else
        echo "Running BOLD for $partic"
        for bold_type in ${boldValues[*]}; do
          # Makes directory if it doesn't exist
          if [ ! -d $particDir/bold/${bold_type} ]; then
            mkdir -p $particDir/bold/${bold_type}
          fi
          # If task directory exists run dcm2niix on it
          if [ ! -z `find $particRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1` ]; then
            boldDir=`find $particRawDir -maxdepth 1 -iname "*${bold_type}*" -print | sort | tail -1`
            dcm2niix -f "$partic"_${bold_type} -o $particDir/bold/${bold_type} "$boldDir"
          else
            echo "No data for $bold_type in $partic directory."
          fi
        done
      fi

      if [ $magPhaseBool -eq 1 ]; then
        # Running for Mag (note the sort -r)
        echo "Beginning Magnitude-Phase fieldmap conversion..."

        magDir=`find $particRawDir -maxdepth 1 -iname "*field*" -print | sort -r | tail -1`
        if [ ! -d $particDir/fieldmaps ]; then
          mkdir -p $particDir/fieldmaps
        fi
        echo "Running dcm2nii for Mag fieldmaps"
        dcm2niix -f "$partic"_Mag -o $particDir/fieldmaps "$magDir"

        if [ $magDir = `find $particRawDir -maxdepth 1 -iname "*field*" -print | sort | tail -1` ]; then
          echo "Only one fieldmap was found. Verify files."
        else
          # Running same system for Phase
          phaseDir=`find $particRawDir -maxdepth 1 -iname "*field*" -print | sort | tail -1`
          echo "Running dcm2nii for Mag fieldmaps"
          dcm2niix -f "$partic"_Phase -o $particDir/fieldmaps "$phaseDir"
        fi
      else
        echo "No Magnitude or Phase fieldmaps found for $partic"
      fi
      echo "-----------------------------------------------"
      echo "Finished transfer and conversion for $partic"
      echo "-----------------------------------------------"
    fi
  fi
done

echo "Finished all participants."
